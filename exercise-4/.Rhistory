# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
numrow(flighst)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
numrow(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
rownames(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
rownames(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, airtime_gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(desc(flights, airtime_gained))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(airtime_gained))
View(head(flights))
%>% arrange(desc(airtime_gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(airtime_gained = arr_delay - dep_delay) %>% arrange(desc(airtime_gained)
flights <- flights %>% mutate(airtime_gained = arr_delay - dep_delay) %>%
arrange(desc(airtime_gained)
flights <- flights %>% mutate(airtime_gained = arr_delay - dep_delay) %>%
arrange(desc(airtime_gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(airtime_gained = arr_delay - dep_delay) %>% arrange(desc(airtime_gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(airtime_gained = arr_delay - dep_delay) %>% arrange(desc(airtime_gained))
rownames(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, airtime_gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(airtime_gained))
View(head(flights))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mut
flights <- flights %>% mutate(airtime_gained = arr_delay - dep_delay) %>% arrange(desc(airtime_gained))
View(flights)
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$airtime_gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$airtime_gained, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_seatac <- flights %>% select(origin, dest, airtime_gained) %>% filter(dest == "SEA")
View(to_seatac)
View(to_seatac)
# On average, did flights to SeaTac gain or loose time?
mean(to_seatac$airtime_gained, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin=="JFK", dest=="SEA") %>%
summarize(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
filter(flights, origin=="JFK", dest=="SEA") %>%
summarise(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
filter(flights, origin=="JFK", dest=="SEA") %>%
summarise(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
filter(flights, origin=="JFK", dest=="SEA") %>%
summarise(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
filter(flights, origin=="JFK", dest=="SEA") %>%
summarise(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(arr_delay, na.rm=TRUE))
View(dep_delay_by_month)
View(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm=TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
city_fasted_speed <- flights %>%
mutate(speed = distance/air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fasted_speed
# Exercise 5: dplyr grouped operations
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm=TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
# Which city was flown to with the highest average speed?
city_fastest_speed <- flights %>%
mutate(speed = distance/air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fastest_speed
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm=TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
# Which city was flown to with the highest average speed?
city_fastest_speed <- flights %>%
mutate(speed = distance/air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fastest_speed
